{"version":3,"sources":["Views/Qrcode/index.tsx","utils/index.tsx","Views/Virus/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeQrcodeBase64","val","options","callback","QRCode","toDataURL","Object","assign","margin","error","base64","console","debounceMakeQrcodeBase64","func","timer","ms","args","clearTimeout","setTimeout","debounce","Qrcode","useState","value","setValue","imgUrl","setImgUrl","useEffect","window","location","href","className","style","height","autoFocus","onChange","e","target","onFocus","select","placeholder","src","alt","Virus","scene","Scene","id","map","Mapbox","pitch","center","zoom","maxZoom","pointLayer","PointLayer","source","shape","size","color","active","opacity","strokeWidth","addLayer","renderChart","document","title","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ad7e58d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport QRCode from 'qrcode'\nimport { debounce } from '../../utils'\nimport './style.scss'\n\nfunction makeQrcodeBase64(\n    val: string,\n    options: QRCode.QRCodeToDataURLOptions = {},\n    callback: (string: string) => void = () => { }\n) {\n    return QRCode.toDataURL(\n        val,\n        Object.assign({\n            margin: 0\n        }, options),\n        (error: Error, base64: string) => {\n            if (error) {\n                console.error(error)\n            } else {\n                callback(base64)\n            }\n        }\n    )\n}\n\nconst debounceMakeQrcodeBase64 = debounce(makeQrcodeBase64)\n\nconst Qrcode: React.FC = () => {\n    const [value, setValue] = useState<string>('')\n    const [imgUrl, setImgUrl] = useState<string>('')\n\n    useEffect(() => {\n        const href = window.location.href\n        makeQrcodeBase64(href, {}, (base64: string) => {\n            setImgUrl(base64)\n        })\n    }, [])\n\n    function handleInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        const val = e.target.value\n        setValue(val)\n        debounceMakeQrcodeBase64(val, {}, (base64: string) => {\n            setImgUrl(base64)\n        })\n    }\n\n    function handleInputFocus(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        e.target.select()\n    }\n\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title\">二维码生成</h1>\n                <p className=\"subtitle is-5\">将输入的<strong>文字</strong>或<strong>链接</strong>转换为二维码</p>\n\n                <div className=\"columns\">\n\n                    <div className=\"control column is-half\">\n                        <textarea\n                            style={{ height: '100%' }}\n                            autoFocus\n                            className=\"textarea\"\n                            value={value}\n                            onChange={handleInputChange}\n                            onFocus={handleInputFocus}\n                            placeholder=\"请输入内容, 例如：http(s)://\"\n                        />\n                        <span className=\"icon is-small is-left\">\n                            <i className=\"fas fa-globe\"></i>\n                        </span>\n                    </div>\n                    <figure className=\"qrcode column is-half\">\n                        <img src={imgUrl} alt=\"qrcode\" />\n                    </figure>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Qrcode","export function debounce (func: Function, ms: number = 300) {\n    let timer: NodeJS.Timeout\n    return function (...args: any[]) {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(function () {\n            return func(...args)\n        }, ms)\n    }\n}","import React, { useEffect } from 'react'\nimport { Scene, PointLayer } from '@antv/l7';\nimport { Mapbox } from '@antv/l7-maps';\nimport './style.scss'\n\n\nconst Virus: React.FC = () => {\n\n    function renderChart() {\n        const scene = new Scene({\n            id: 'chartContainer',\n            map: new Mapbox({\n                pitch: 0,\n                style: 'dark',\n                center: [110.99215001469588, 29.281597225674773],\n                zoom: 2.294613775109773,\n                maxZoom: 10\n            })\n        });\n\n        const data = {\n            \"type\": \"FeatureCollection\",\n            \"features\": [\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [114.308136, 30.599213]\n                    },\n                    \"properties\": {\n                        \"capacity\": 198,\n                        \"city\": \"武汉\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [116.403613, 39.915573]\n                    },\n                    \"properties\": {\n                        \"capacity\": 5,\n                        \"city\": \"北京\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [113.255753, 23.139278]\n                    },\n                    \"properties\": {\n                        \"capacity\": 14,\n                        \"city\": \"广东\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [121.474216, 31.233212]\n                    },\n                    \"properties\": {\n                        \"capacity\": 2,\n                        \"city\": \"上海\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [120.203231, 30.254829]\n                    },\n                    \"properties\": {\n                        \"capacity\": 5,\n                        \"city\": \"浙江\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [102.71527, 25.050645]\n                    },\n                    \"properties\": {\n                        \"capacity\": 1,\n                        \"city\": \"云南\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [104.074038, 30.65636]\n                    },\n                    \"properties\": {\n                        \"capacity\": 2,\n                        \"city\": \"四川\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [117.00617, 36.66212]\n                    },\n                    \"properties\": {\n                        \"capacity\": 1,\n                        \"city\": \"山东\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [108.374191, 22.816205]\n                    },\n                    \"properties\": {\n                        \"capacity\": 1,\n                        \"city\": \"广西壮族自治区\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [114.172902, 22.330232]\n                    },\n                    \"properties\": {\n                        \"capacity\": 106,\n                        \"city\": \"香港\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [106.679978, 26.605321]\n                    },\n                    \"properties\": {\n                        \"capacity\": 1,\n                        \"city\": \"贵州省\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [123.441343, 41.803406]\n                    },\n                    \"properties\": {\n                        \"capacity\": 1,\n                        \"city\": \"辽宁省\"\n                    }\n                },\n            ]\n        }\n\n        // data.features = data.features.filter((item: any) => {\n        //     return item.properties.capacity > 800;\n        // });\n        const pointLayer = new PointLayer({})\n            .source(data)\n            .shape('circle')\n            .size('capacity', [10, 20])\n            .color('capacity', [\n                '#34B6B7',\n                '#4AC5AF',\n                '#5FD3A6',\n                '#7BE39E',\n                '#A1EDB8',\n                '#CEF8D6'\n            ])\n            .active(true)\n            .style({\n                opacity: 0.5,\n                strokeWidth: 0\n            });\n\n        scene.addLayer(pointLayer);\n    }\n\n\n    useEffect(() => {\n        renderChart()\n        document.title = '疫情地图'\n    })\n\n    return (\n        <div id=\"chartContainer\" className=\"chart-container\" />\n    )\n}\n\nexport default Virus","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Qrcode from './Views/Qrcode'\nimport Virus from './Views/Virus'\n\nconst App: React.FC = () => {\n  return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/qrcode\" component={Qrcode} />\n          <Route exact path=\"/virus\" component={Virus} />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}