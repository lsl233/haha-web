{"version":3,"sources":["Views/Qrcode/index.tsx","Views/Virus/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Qrcode","useState","value","setValue","imgUrl","setImgUrl","className","autoFocus","type","onChange","e","target","QRCode","toDataURL","then","url","catch","err","console","error","placeholder","src","alt","Virus","useEffect","scene","Scene","id","map","Mapbox","pitch","style","center","zoom","maxZoom","pointLayer","PointLayer","source","shape","size","color","active","opacity","strokeWidth","addLayer","renderChart","document","title","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f586281.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport QRCode from 'qrcode'\r\nimport './style.scss'\r\n\r\n\r\nconst Qrcode: React.FC = () => {\r\n    const [value, setValue] = useState<string>('')\r\n    const [imgUrl, setImgUrl] = useState<string>('')\r\n\r\n    function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const value = e.target.value\r\n        setValue(value)\r\n        QRCode.toDataURL(value)\r\n            .then(url => {\r\n                setImgUrl(url)\r\n            })\r\n            .catch(err => {\r\n                console.error(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"control\">\r\n                <input\r\n                    autoFocus\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    value={value} onChange={handleInputChange}\r\n                    placeholder=\"请输入内容\"\r\n                />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-globe\"></i>\r\n                </span>\r\n            </div>\r\n            <div className=\"qrcode\">\r\n                <img src={imgUrl} alt=\"qrcode\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Qrcode","import React, { useEffect } from 'react'\r\nimport { Scene, PointLayer } from '@antv/l7';\r\nimport { Mapbox } from '@antv/l7-maps';\r\nimport './style.scss'\r\n\r\n\r\nconst Virus: React.FC = () => {\r\n\r\n    function renderChart() {\r\n        const scene = new Scene({\r\n            id: 'chartContainer',\r\n            map: new Mapbox({\r\n                pitch: 0,\r\n                style: 'dark',\r\n                center: [110.99215001469588, 29.281597225674773],\r\n                zoom: 2.294613775109773,\r\n                maxZoom: 10\r\n            })\r\n        });\r\n\r\n        const data = {\r\n            \"type\": \"FeatureCollection\",\r\n            \"features\": [\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [114.308136, 30.599213]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 198,\r\n                        \"city\": \"武汉\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [116.403613, 39.915573]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 5,\r\n                        \"city\": \"北京\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [113.255753, 23.139278]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 14,\r\n                        \"city\": \"广东\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [121.474216, 31.233212]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 2,\r\n                        \"city\": \"上海\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [120.203231, 30.254829]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 5,\r\n                        \"city\": \"浙江\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [102.71527, 25.050645]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 1,\r\n                        \"city\": \"云南\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [104.074038, 30.65636]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 2,\r\n                        \"city\": \"四川\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [117.00617, 36.66212]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 1,\r\n                        \"city\": \"山东\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [108.374191, 22.816205]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 1,\r\n                        \"city\": \"广西壮族自治区\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [114.172902, 22.330232]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 106,\r\n                        \"city\": \"香港\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [106.679978, 26.605321]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 1,\r\n                        \"city\": \"贵州省\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"Feature\",\r\n                    \"geometry\": {\r\n                        \"type\": \"Point\",\r\n                        \"coordinates\": [123.441343, 41.803406]\r\n                    },\r\n                    \"properties\": {\r\n                        \"capacity\": 1,\r\n                        \"city\": \"辽宁省\"\r\n                    }\r\n                },\r\n            ]\r\n        }\r\n\r\n        // data.features = data.features.filter((item: any) => {\r\n        //     return item.properties.capacity > 800;\r\n        // });\r\n        const pointLayer = new PointLayer({})\r\n            .source(data)\r\n            .shape('circle')\r\n            .size('capacity', [10, 20])\r\n            .color('capacity', [\r\n                '#34B6B7',\r\n                '#4AC5AF',\r\n                '#5FD3A6',\r\n                '#7BE39E',\r\n                '#A1EDB8',\r\n                '#CEF8D6'\r\n            ])\r\n            .active(true)\r\n            .style({\r\n                opacity: 0.5,\r\n                strokeWidth: 0\r\n            });\r\n\r\n        scene.addLayer(pointLayer);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        renderChart()\r\n        document.title = '疫情地图'\r\n    })\r\n\r\n    return (\r\n        <div id=\"chartContainer\" className=\"chart-container\" />\r\n    )\r\n}\r\n\r\nexport default Virus","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport 'bulma'\nimport Qrcode from './Views/Qrcode'\nimport Virus from './Views/Virus'\n\nconst App: React.FC = () => {\n  return (\n    // <div className=\"container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/qrcode\" component={Qrcode} />\n          <Route exact path=\"/virus\" component={Virus} />\n        </Switch>\n      </Router>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}