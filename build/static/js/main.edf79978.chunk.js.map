{"version":3,"sources":["Components/Header/index.tsx","Views/Home/index.tsx","Views/Qrcode/index.tsx","utils/index.tsx","Views/JSON/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","src","alt","Home","name","des","image","url","map","item","makeQrcodeBase64","val","options","callback","QRCode","toDataURL","Object","assign","margin","error","base64","console","debounceMakeQrcodeBase64","func","timer","ms","args","clearTimeout","setTimeout","debounce","Qrcode","useState","value","setValue","imgUrl","setImgUrl","useEffect","window","location","href","autoFocus","onChange","e","target","onFocus","select","rows","placeholder","JSONView","setVal","errMsg","setErrMsg","html","setHTML","str","hljs","highlightAuto","JSON","stringify","parse","replace","message","style","opacity","dangerouslySetInnerHTML","__html","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edf79978.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, HashRouter as Router } from 'react-router-dom'\n\nconst Header: React.FC = () => {\n    return (\n        <Router>\n            <nav className=\"navbar has-shadow\">\n                <div className=\"navbar-brand\">\n                    <Link to=\"/\" className=\"navbar-item\" >\n                        <img src=\"/images/logo.png\" alt=\"logo\" />\n                    </Link>\n\n                    <div className=\"navbar-burger\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n\n                <div className=\"navbar-menu\">\n                    <div className=\"navbar-start\">\n                        <Link to=\"/\" className=\"navbar-item\">首页</Link>\n                        <Link to=\"/qrcode\" className=\"navbar-item\">二维码生成</Link>\n                        <Link to=\"/json\" className=\"navbar-item\">JSON格式化</Link>\n                    </div>\n                </div>\n            </nav>\n        </Router>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './style.scss'\n\nconst Home: React.FC = () => {\n    const apps = [\n        {\n            name: '二维码生成器',\n            des: '可以将文本(链接)转换为二维码，方便手机扫描获取',\n            image: '/images/qrcode.png',\n            url: '/qrcode'\n        },\n        {\n            name: 'JSON 格式化',\n            des: '将输入的 JSON字符串 美化展示',\n            image: '/images/json.png',\n            url: '/json'\n        }\n    ]\n\n    return (\n        <div className=\"container home\">\n            <div className=\"columns\">\n                {\n                    apps.map(item => (\n                        <div className=\"column is-4\">\n                            <div className=\"card\">\n                                <Link to={item.url}>\n                                    <div className=\"card-content\">\n                                        <div className=\"media\">\n                                            <div className=\"media-left\">\n                                                <figure className=\"image is-96x96\">\n                                                    <img src={item.image} alt=\"logo\" />\n                                                </figure>\n                                            </div>\n                                            <div className=\"media-content\">\n                                                <h3 className=\"title\">{item.name}</h3>\n                                                <p className=\"ellipsis-2\">{item.des}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Link>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Home","import React, { useState, useEffect } from 'react'\nimport QRCode from 'qrcode'\nimport { debounce } from '../../utils'\nimport './style.scss'\n\nfunction makeQrcodeBase64(\n    val: string,\n    options: QRCode.QRCodeToDataURLOptions = {},\n    callback: (string: string) => void = () => { }\n) {\n    return QRCode.toDataURL(\n        val,\n        Object.assign({\n            margin: 0\n        }, options),\n        (error: Error, base64: string) => {\n            if (error) {\n                console.error(error)\n            } else {\n                callback(base64)\n            }\n        }\n    )\n}\n\nconst debounceMakeQrcodeBase64 = debounce(makeQrcodeBase64)\n\nconst Qrcode: React.FC = () => {\n    const [value, setValue] = useState<string>('')\n    const [imgUrl, setImgUrl] = useState<string>('')\n\n    useEffect(() => {\n        const href = window.location.href\n        makeQrcodeBase64(href, {}, (base64: string) => {\n            setImgUrl(base64)\n        })\n    }, [])\n\n    function handleInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        const val = e.target.value\n        setValue(val)\n        debounceMakeQrcodeBase64(val, {}, (base64: string) => {\n            setImgUrl(base64)\n        })\n    }\n\n    function handleInputFocus(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        e.target.select()\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">二维码生成</h1>\n            <p className=\"subtitle is-5\">将输入的 <strong>文字</strong> 或 <strong>链接</strong> 转换为二维码</p>\n\n            <div className=\"columns\">\n\n                <div className=\"control column is-half\">\n                    <textarea\n                        autoFocus\n                        className=\"textarea\"\n                        value={value}\n                        onChange={handleInputChange}\n                        onFocus={handleInputFocus}\n                        rows={5}\n                        placeholder=\"请输入内容, 例如：http(s)://\"\n                    />\n                    <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-globe\"></i>\n                    </span>\n                </div>\n                <figure className=\"qrcode column is-half\">\n                    <img src={imgUrl} alt=\"qrcode\" />\n                </figure>\n            </div>\n        </div>\n    )\n}\n\nexport default Qrcode","export function debounce (func: Function, ms: number = 300) {\n    let timer: NodeJS.Timeout\n    return function (...args: any[]) {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(function () {\n            return func(...args)\n        }, ms)\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { debounce } from '../../utils'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/github.css'\nimport './style.scss'\n\nfunction removeQuotation(str: string) {\n    return str.replace(/(^\\\")|(\\\"$)/g, \"\")\n}\n\nconst JSONView: React.FC = () => {\n    const [val, setVal] = useState<string>('')\n    const [errMsg, setErrMsg] = useState<string>('')\n    const [html, setHTML] = useState<string>('')\n\n    function handleInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        const val = e.target.value\n        setVal(val)\n        if (!val) return\n        try {\n            const html = hljs.highlightAuto(JSON.stringify(JSON.parse(removeQuotation(val)), null, 4)).value\n            setHTML(html)\n            setErrMsg('')\n        } catch (e) {\n            setErrMsg(e.message)\n        }\n\n    }\n\n    function handleInputFocus(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        e.target.select()\n    }\n\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">JSON 格式化</h1>\n            <p className=\"subtitle is-5\">将输入的 <strong>JSON字符串</strong> 美化展示</p>\n\n            <div className=\"columns\">\n                <div className=\"control column is-half\">\n                    <textarea\n                        autoFocus\n                        className=\"textarea\"\n                        value={val}\n                        onChange={handleInputChange}\n                        onFocus={handleInputFocus}\n                        rows={10}\n                        placeholder=\"请输入JSON字符串\"\n                    />\n                    <p>{errMsg}</p>\n                </div>\n                <div className=\"column is-half\">\n                    <pre style={{ opacity: html ? 1 : 0 }} className=\"prview-code\"><code className=\"language-json\" dangerouslySetInnerHTML={{ __html: html }}></code></pre>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default JSONView","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Header from './Components/Header'\nimport Home from './Views/Home'\nimport Qrcode from './Views/Qrcode'\nimport JSONView from './Views/JSON'\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <div className=\"section\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/qrcode\" component={Qrcode} />\n            <Route exact path=\"/json\" component={JSONView} />\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}